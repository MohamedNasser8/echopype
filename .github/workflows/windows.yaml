name: windows-build

on:
  push:
    branches:
      - dev
      - main
    paths-ignore: [".ci_helpers/docker/**", "**/docker.yaml"]
  pull_request:
  workflow_dispatch:

env:
  CONDA_ENV: echopype
  NUM_WORKERS: 2

jobs:
  windows-test:
      name: windows-${{ matrix.python-version }}-build
      runs-on: "windows-latest"
      if: github.repository == 'OSOceanAcoustics/echopype'
      continue-on-error: ${{ matrix.experimental }}
      strategy:
        fail-fast: false
        matrix:
          include:
          - python-version: 3.9
            experimental: false
      defaults:
        run:
          shell: powershell
      steps:
        - name: Checkout repo
          uses: actions/checkout@v3
          with:
            fetch-depth: 0 # Fetch all history for all branches and tags.
        - name: Install rclone
          run: |
            choco search rclone
            choco install rclone
        - name: Set environment variables
          run: |
            "RCLONE_DRIVE_SERVICE_ACCOUNT_FILE=${{ runner.temp }}\google-echopype.json" >> $env:GITHUB_ENV
            "RCLONE_DRIVE_ROOT_FOLDER_ID=${{ env.ROOT_FOLDER_ID }}" >> $env:GITHUB_ENV
            "RCLONE_DRIVE_SCOPE=drive" >> $env:GITHUB_ENV
            "RCLONE_CONFIG_GDRIVE_TYPE=drive" >> $env:GITHUB_ENV
          env:
            ROOT_FOLDER_ID: ${{ secrets.TEST_DATA_FOLDER_ID }}
        - name: Setup gdrive creds
          shell: python
          run: |
            import os
            from pathlib import Path
            import json

            acct_file = Path(os.environ.get("RCLONE_DRIVE_SERVICE_ACCOUNT_FILE"))
            service_json = json.loads(os.environ.get("GOOGLE_SERVICE_JSON"))

            acct_file.write_text(json.dumps(service_json))
          env:
            GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}
        - name: List google drive
          run: |
            rclone ls gdrive:
        - name: Copy test data to local
          run: |
            $TEST_DATA_FOLDER = "${{ env.GITHUB_WORKSPACE }}\echopype\test_data"
            if (Test-Path -Path $TEST_DATA_FOLDER) {
              echo "Removing old test data"
              Remove-Item $TEST_DATA_FOLDER -Recurse
              echo "Copying new test data from google drive"
              rclone copy gdrive: $TEST_DATA_FOLDER
              echo "Done"
            } else {
               echo "$TEST_DATA_FOLDER not found"
            }

            echo "Updating permissions"
            $Acl = Get-Acl $TEST_DATA_FOLDER

            $Ar = New-Object System.Security.AccessControl.FileSystemAccessRule("user", "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow")

            $Acl.SetAccessRule($Ar)
            Set-Acl $TEST_DATA_FOLDER $Acl

            echo "List folder"
            Get-ChildItem -Path $TEST_DATA_FOLDER
        - name: Setup micromamba
          uses: mamba-org/provision-with-micromamba@v15
          with:
            environment-file: .ci_helpers/py${{ matrix.python-version }}.yaml
            environment-name: ${{ env.CONDA_ENV }}
            cache-env: true
            cache-env-key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles(format('.ci_helpers/py{0}.yaml', matrix.python-version)) }}
        - name: Print conda env
          run: |
            micromamba info
            micromamba env list
            micromamba list
        - name: Install echopype
          run: |
            python -m pip install -e ".[plot]"
        - name: Run convert test
          run: |
            pytest -vvv echopype/tests/convert/test_convert_source_target_locs.py::test_convert_ek
