name: Package test data

on:
  schedule:
    - cron: '0 0 * * *' # Run Daily
  workflow_dispatch:
  pull_request:

env:
  GITHUB_SHA: ${{ github.sha }}
  TEST_DATA_FOLDER: ${{ github.workspace }}/echopype/test_data/

jobs:
  test-data-build:
    name: package-test-data
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4.5.0
        with:
          python-version: 3.9
      - name: Install PyDrive2
        run: pip install 'pydrive2[fsspec]'
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      - name: Set Environment
        run: |
          DATE_TAG="$( date -u '+%Y.%m.%d' )"
          echo "DATE_TAG=${DATE_TAG}" >> $GITHUB_ENV
      - name: Install rclone
        run: brew install rclone
      - name: Set environment variables
        run: |
          DATE_TAG="$( date -u '+%Y.%m.%d' )"
          echo "ZIP_FILE=test_data-${DATE_TAG}.zip" >> $GITHUB_ENV
          echo "RCLONE_DRIVE_SERVICE_ACCOUNT_FILE=${{ runner.temp }}/google-echopype.json" >> $GITHUB_ENV
          echo "RCLONE_DRIVE_ROOT_FOLDER_ID=${{ env.ROOT_FOLDER_ID }}" >> $GITHUB_ENV
          echo "RCLONE_DRIVE_SCOPE=drive" >> $GITHUB_ENV
          echo "RCLONE_CONFIG_GDRIVE_TYPE=drive" >> $GITHUB_ENV
        env:
          ROOT_FOLDER_ID: ${{ secrets.TEST_DATA_FOLDER_ID }}
      - name: Setup gdrive creds
        shell: python
        run: |
          import os
          from pathlib import Path
          import json

          acct_file = Path(os.environ.get("RCLONE_DRIVE_SERVICE_ACCOUNT_FILE"))
          service_json = json.loads(os.environ.get("GOOGLE_SERVICE_JSON"))

          acct_file.write_text(json.dumps(service_json))
        env:
          GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}
      - name: List google drive
        run: |
          rclone ls gdrive:
      - name: Copy test data to local
        run: |
          if [ -d ${{ env.TEST_DATA_FOLDER }} ]
          then
              echo "Removing old test data"
              rm -rf ${{ env.TEST_DATA_FOLDER }}
              echo "Copying new test data from google drive"
              rclone copy gdrive: ${{ env.TEST_DATA_FOLDER }}
              echo "Done"

              chmod -R ugoa+w ${{ env.TEST_DATA_FOLDER }}
              ls -lah ${{ env.TEST_DATA_FOLDER }}
          else
              echo "${{ env.TEST_DATA_FOLDER }} not found"
          fi
      - name: Zip the test data folder
        run: python -m zipfile -c ${{ env.ZIP_FILE }} ${{ env.TEST_DATA_FOLDER }}
      - name: Check the zip file
        run: |
          python -m zipfile -t ${{ env.ZIP_FILE }}
          python -m zipfile -l ${{ env.ZIP_FILE }}
      - name: Upload zipfile to google drive
        shell: python
        run: |
          import os
          from pydrive2.fs import GDriveFileSystem

          download_url = "https://drive.google.com/uc?export=download&id={file_id}".format
          zip_file_name = os.environ.get('ZIP_FILE')
          zip_folder_id = os.environ.get('ZIP_ROOT_FOLDER_ID')

          tdz_fs = GDriveFileSystem(
              zip_folder_id,
              use_service_account=True,
              client_json=os.environ.get('GOOGLE_SERVICE_JSON'),
          )

          remote_file_path = '/'.join([zip_folder_id, zip_file_name])
          tdz_fs.put_file(zip_file_name, remote_file_path)
          remote_file_id = tdz_fs._get_item_id(remote_file_path)
          print("Download url:", download_url(file_id=remote_file_id))
        env:
          ZIP_ROOT_FOLDER_ID: ${{ secrets.TEST_DATA_ZIP_FOLDER_ID }}
          GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}
